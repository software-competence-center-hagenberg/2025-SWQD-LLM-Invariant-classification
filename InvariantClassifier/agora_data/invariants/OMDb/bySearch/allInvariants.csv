ID;pptname;invariant;invariantType;variables;tp;fp;enter;bug
0;main..bySearch&200&Search(main.bySearch&Input):::EXIT;input.type == return.Type;daikon.inv.binary.twoString.StringEqual;(input.type, return.Type);1.0;0.0;0.0;0.0
1;main..bySearch&200(main.bySearch&Input):::EXIT;"return.Response == ""True""";daikon.inv.unary.string.OneOfString;(return.Response);1.0;0.0;0.0;0.0
2;main..bySearch&200(main.bySearch&Input):::EXIT;return.Search != null;daikon.inv.unary.scalar.NonZero;(return.Search);1.0;0.0;0.0;0.0
3;main..bySearch&200(main.bySearch&Input):::EXIT;return.Search[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.Search[..]);1.0;0.0;0.0;0.0
4;main..bySearch&200&Search(main.bySearch&Input):::EXIT;return.Poster is Url;daikon.inv.unary.string.IsUrl;(return.Poster);1.0;0.0;0.0;0.0
5;main..bySearch&200(main.bySearch&Input):::EXIT;LENGTH(return.Response)==4;daikon.inv.unary.string.FixedLengthString;(return.Response);1.0;0.0;0.0;0.0
6;main..bySearch&200(main.bySearch&Input):::EXIT;return.totalResults is Numeric;daikon.inv.unary.string.IsNumeric;(return.totalResults);1.0;0.0;0.0;0.0
7;main..bySearch&200(main.bySearch&Input):::EXIT;input.y > size(return.Search[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.y, size(return.Search[..]));0.0;1.0;0.0;0.0
8;main..bySearch&200(main.bySearch&Input):::EXIT;input.page <= size(return.Search[]);daikon.inv.binary.twoScalar.IntLessEqual;(input.page, size(return.Search[..]));0.0;1.0;0.0;0.0
9;main..bySearch&200(main.bySearch&Input):::EXIT;input.page != size(return.Search[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.page, size(return.Search[..])-1);0.0;1.0;0.0;0.0
10;main..bySearch&200(main.bySearch&Input):::EXIT;size(return.Search[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.Search[..]));1.0;0.0;0.0;0.0

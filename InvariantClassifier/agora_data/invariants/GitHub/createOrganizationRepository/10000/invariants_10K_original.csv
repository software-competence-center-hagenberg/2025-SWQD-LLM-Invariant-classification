pptname;invariant;invariantType;variables;tp;fp;enter;bug
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;"input.visibility one of { ""private"", ""public"" }";daikon.inv.unary.string.OneOfString;(input.visibility);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;"input.squash_merge_commit_title one of { ""COMMIT_OR_PR_TITLE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.squash_merge_commit_title);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;"input.squash_merge_commit_message one of { ""BLANK"", ""COMMIT_MESSAGES"", ""PR_BODY"" }";daikon.inv.unary.string.OneOfString;(input.squash_merge_commit_message);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;"input.merge_commit_title one of { ""MERGE_MESSAGE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.merge_commit_title);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::ENTER;"input.merge_commit_message one of { ""BLANK"", ""PR_BODY"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.merge_commit_message);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.org == return.owner.login;daikon.inv.binary.twoString.StringEqual;(input.org, return.owner.login);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.org == return.organization.login;daikon.inv.binary.twoString.StringEqual;(input.org, return.organization.login);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.description == return.description;daikon.inv.binary.twoString.StringEqual;(input.description, return.description);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.homepage == return.homepage;daikon.inv.binary.twoString.StringEqual;(input.homepage, return.homepage);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.visibility == return.visibility;daikon.inv.binary.twoString.StringEqual;(input.visibility, return.visibility);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.has_issues == return.has_issues;daikon.inv.binary.twoScalar.IntEqual;(input.has_issues, return.has_issues);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.has_projects == return.has_projects;daikon.inv.binary.twoScalar.IntEqual;(input.has_projects, return.has_projects);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.has_wiki == return.has_wiki;daikon.inv.binary.twoScalar.IntEqual;(input.has_wiki, return.has_wiki);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.is_template == return.is_template;daikon.inv.binary.twoScalar.IntEqual;(input.is_template, return.is_template);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.allow_squash_merge == return.allow_squash_merge;daikon.inv.binary.twoScalar.IntEqual;(input.allow_squash_merge, return.allow_squash_merge);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.allow_merge_commit == return.allow_merge_commit;daikon.inv.binary.twoScalar.IntEqual;(input.allow_merge_commit, return.allow_merge_commit);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.allow_rebase_merge == return.allow_rebase_merge;daikon.inv.binary.twoScalar.IntEqual;(input.allow_rebase_merge, return.allow_rebase_merge);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.delete_branch_on_merge == return.delete_branch_on_merge;daikon.inv.binary.twoScalar.IntEqual;(input.delete_branch_on_merge, return.delete_branch_on_merge);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.squash_merge_commit_title == return.squash_merge_commit_title;daikon.inv.binary.twoString.StringEqual;(input.squash_merge_commit_title, return.squash_merge_commit_title);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.squash_merge_commit_message == return.squash_merge_commit_message;daikon.inv.binary.twoString.StringEqual;(input.squash_merge_commit_message, return.squash_merge_commit_message);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.merge_commit_title == return.merge_commit_title;daikon.inv.binary.twoString.StringEqual;(input.merge_commit_title, return.merge_commit_title);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.merge_commit_message == return.merge_commit_message;daikon.inv.binary.twoString.StringEqual;(input.merge_commit_message, return.merge_commit_message);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.forks_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.forks_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.stargazers_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.stargazers_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.watchers_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.watchers_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.size;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.size);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.open_issues_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.open_issues_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.subscribers_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.subscribers_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.network_count;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.network_count);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.open_issues;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.open_issues);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == return.watchers;daikon.inv.binary.twoScalar.IntEqual;(return.forks, return.watchers);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks == size(return.topics[]);daikon.inv.binary.twoScalar.IntEqual;(return.forks, size(return.topics[..]));1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions.admin == return.has_downloads;daikon.inv.binary.twoScalar.IntEqual;(return.permissions.admin, return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions.pull == return.has_downloads;daikon.inv.binary.twoScalar.IntEqual;(return.permissions.pull, return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions.triage == return.has_downloads;daikon.inv.binary.twoScalar.IntEqual;(return.permissions.triage, return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions.push == return.has_downloads;daikon.inv.binary.twoScalar.IntEqual;(return.permissions.push, return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions.maintain == return.has_downloads;daikon.inv.binary.twoScalar.IntEqual;(return.permissions.maintain, return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.id == return.organization.id;daikon.inv.binary.twoScalar.IntEqual;(return.owner.id, return.organization.id);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.node_id == return.organization.node_id;daikon.inv.binary.twoString.StringEqual;(return.owner.node_id, return.organization.node_id);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.avatar_url == return.organization.avatar_url;daikon.inv.binary.twoString.StringEqual;(return.owner.avatar_url, return.organization.avatar_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.gravatar_id == return.organization.gravatar_id;daikon.inv.binary.twoString.StringEqual;(return.owner.gravatar_id, return.organization.gravatar_id);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.url == return.organization.url;daikon.inv.binary.twoString.StringEqual;(return.owner.url, return.organization.url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.html_url == return.organization.html_url;daikon.inv.binary.twoString.StringEqual;(return.owner.html_url, return.organization.html_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.followers_url == return.organization.followers_url;daikon.inv.binary.twoString.StringEqual;(return.owner.followers_url, return.organization.followers_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.following_url == return.organization.following_url;daikon.inv.binary.twoString.StringEqual;(return.owner.following_url, return.organization.following_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.gists_url == return.organization.gists_url;daikon.inv.binary.twoString.StringEqual;(return.owner.gists_url, return.organization.gists_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.starred_url == return.organization.starred_url;daikon.inv.binary.twoString.StringEqual;(return.owner.starred_url, return.organization.starred_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.subscriptions_url == return.organization.subscriptions_url;daikon.inv.binary.twoString.StringEqual;(return.owner.subscriptions_url, return.organization.subscriptions_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.organizations_url == return.organization.organizations_url;daikon.inv.binary.twoString.StringEqual;(return.owner.organizations_url, return.organization.organizations_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.repos_url == return.organization.repos_url;daikon.inv.binary.twoString.StringEqual;(return.owner.repos_url, return.organization.repos_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.events_url == return.organization.events_url;daikon.inv.binary.twoString.StringEqual;(return.owner.events_url, return.organization.events_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.received_events_url == return.organization.received_events_url;daikon.inv.binary.twoString.StringEqual;(return.owner.received_events_url, return.organization.received_events_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.type == return.organization.type;daikon.inv.binary.twoString.StringEqual;(return.owner.type, return.organization.type);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner.site_admin == return.fork;daikon.inv.binary.twoScalar.IntEqual;(return.owner.site_admin, return.fork);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.organization.site_admin == return.fork;daikon.inv.binary.twoScalar.IntEqual;(return.organization.site_admin, return.fork);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.html_url == return.svn_url;daikon.inv.binary.twoString.StringEqual;(return.html_url, return.svn_url);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == return.has_pages;daikon.inv.binary.twoScalar.IntEqual;(return.fork, return.has_pages);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == return.archived;daikon.inv.binary.twoScalar.IntEqual;(return.fork, return.archived);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == return.disabled;daikon.inv.binary.twoScalar.IntEqual;(return.fork, return.disabled);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == return.allow_update_branch;daikon.inv.binary.twoScalar.IntEqual;(return.fork, return.allow_update_branch);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == return.web_commit_signoff_required;daikon.inv.binary.twoScalar.IntEqual;(return.fork, return.web_commit_signoff_required);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"input.visibility one of { ""private"", ""public"" }";daikon.inv.unary.string.OneOfString;(input.visibility);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"input.squash_merge_commit_title one of { ""COMMIT_OR_PR_TITLE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.squash_merge_commit_title);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"input.squash_merge_commit_message one of { ""BLANK"", ""COMMIT_MESSAGES"", ""PR_BODY"" }";daikon.inv.unary.string.OneOfString;(input.squash_merge_commit_message);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"input.merge_commit_title one of { ""MERGE_MESSAGE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.merge_commit_title);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"input.merge_commit_message one of { ""BLANK"", ""PR_BODY"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(input.merge_commit_message);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.permissions != null;daikon.inv.unary.scalar.NonZero;(return.permissions);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.owner != null;daikon.inv.unary.scalar.NonZero;(return.owner);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.owner.gravatar_id == """"";daikon.inv.unary.string.OneOfString;(return.owner.gravatar_id);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.owner.type == ""Organization""";daikon.inv.unary.string.OneOfString;(return.owner.type);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.organization != null;daikon.inv.unary.scalar.NonZero;(return.organization);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.fork == false;daikon.inv.unary.scalar.OneOfScalar;(return.fork);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.default_branch == ""main""";daikon.inv.unary.string.OneOfString;(return.default_branch);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.topics != null;daikon.inv.unary.scalar.NonZero;(return.topics);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.topics[] == [];daikon.inv.unary.stringsequence.OneOfStringSequence;(return.topics[..]);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.has_downloads == true;daikon.inv.unary.scalar.OneOfScalar;(return.has_downloads);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.template_repository == null;daikon.inv.unary.scalar.OneOfScalar;(return.template_repository);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.template_repository.owner == null;daikon.inv.unary.scalar.OneOfScalar;(return.template_repository.owner);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.template_repository.topics == null;daikon.inv.unary.scalar.OneOfScalar;(return.template_repository.topics);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.template_repository.permissions == null;daikon.inv.unary.scalar.OneOfScalar;(return.template_repository.permissions);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.merge_commit_message one of { ""BLANK"", ""PR_BODY"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(return.merge_commit_message);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.merge_commit_title one of { ""MERGE_MESSAGE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(return.merge_commit_title);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.squash_merge_commit_message one of { ""BLANK"", ""COMMIT_MESSAGES"", ""PR_BODY"" }";daikon.inv.unary.string.OneOfString;(return.squash_merge_commit_message);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;"return.squash_merge_commit_title one of { ""COMMIT_OR_PR_TITLE"", ""PR_TITLE"" }";daikon.inv.unary.string.OneOfString;(return.squash_merge_commit_title);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.team_id < return.id;daikon.inv.binary.twoScalar.IntLessThan;(input.team_id, return.id);0;1;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.team_id > return.forks;daikon.inv.binary.twoScalar.IntGreaterThan;(input.team_id, return.forks);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;input.team_id < return.owner.id;daikon.inv.binary.twoScalar.IntLessThan;(input.team_id, return.owner.id);0;1;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.id > return.forks;daikon.inv.binary.twoScalar.IntGreaterThan;(return.id, return.forks);1;0;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.id > return.owner.id;daikon.inv.binary.twoScalar.IntGreaterThan;(return.id, return.owner.id);0;1;0;0
main.orgs{org}repos.createOrganizationRepository&201(main.createOrganizationRepository&Input):::EXIT;return.forks < return.owner.id;daikon.inv.binary.twoScalar.IntLessThan;(return.forks, return.owner.id);1;0;0;0

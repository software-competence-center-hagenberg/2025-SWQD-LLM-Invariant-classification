pptname;invariant;invariantType;variables;tp;fp;enter;bug
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.open_at == 1663868799;daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.open_at == 1663868799;daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses&categories(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.open_at == 1663868799;daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.open_at == 1663868799;daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.image_url)==68;daikon.inv.unary.string.FixedLengthString;(return.image_url);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.image_url is Url;daikon.inv.unary.string.IsUrl;(return.image_url);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.is_closed == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_closed);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.phone is Numeric;daikon.inv.unary.string.IsNumeric;(return.phone);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= 1;daikon.inv.unary.scalar.LowerBound;(return.review_count);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;"return.transactions[] elements one of { ""delivery"", ""pickup"", ""restaurant_reservation"" }";daikon.inv.unary.stringsequence.EltOneOfString;(return.transactions[..]);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.location.country)==2;daikon.inv.unary.string.FixedLengthString;(return.location.country);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.categories[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.location.display_address[]) >= 2;daikon.inv.unary.scalar.LowerBound;(size(return.location.display_address[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > return.review_count;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.review_count);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.categories[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.transactions[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.location.display_address[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.categories[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.transactions[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.offset > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.offset, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.latitude, return.distance);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.longitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.longitude, return.distance);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.distance > return.rating;daikon.inv.binary.twoScalar.FloatGreaterThan;(return.distance, return.rating);0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.attributes[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.review_count, size(return.transactions[..]));0;1;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address1 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address1, return.location.display_address[..]);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address2 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address2, return.location.display_address[..]);1;0;0;0
main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address3 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address3, return.location.display_address[..]);1;0;0;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.open_at one of { 1663868799, 1664020931 };daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::ENTER;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.categories[]) == size(input.attributes[]);daikon.inv.binary.twoScalar.IntEqual;(size(input.categories[..]), size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.latitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.latitude);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.longitude is Numeric;daikon.inv.unary.string.IsNumeric;(input.longitude);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;All the elements of input.price[] are Numeric;daikon.inv.unary.stringsequence.SequenceStringElementsAreNumeric;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;All the elements of input.price[] have LENGTH=1;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(input.price[..]);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.open_at one of { 1663868799, 1664020931 };daikon.inv.unary.scalar.OneOfScalar;(input.open_at);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);1;0;0;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.price[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.attributes[]) one of { 1, 2, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > input.limit;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.limit);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, input.offset);0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > return.total;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.total);0;1;0;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.businesses[..]));0;1;0;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit > size(input.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.categories[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit > size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(input.attributes[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.businesses[..]));1;0;0;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.offset >= size(input.price[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(input.price[..]));0;0;1;0
main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.businesses[..]));1;0;0;0

ID;pptname;invariant;invariantType;variables;tp;fp;enter;bug
0;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.categories != null;daikon.inv.unary.scalar.NonZero;(return.categories);1.0;0.0;0.0;0.0
1;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.categories[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.categories[..]);1.0;0.0;0.0;0.0
2;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates != null;daikon.inv.unary.scalar.NonZero;(return.coordinates);1.0;0.0;0.0;0.0
3;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude != 0;daikon.inv.unary.scalar.NonZeroFloat;(return.coordinates.latitude);0.0;1.0;0.0;0.0
4;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.longitude != 0;daikon.inv.unary.scalar.NonZeroFloat;(return.coordinates.longitude);0.0;1.0;0.0;0.0
5;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.is_closed == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_closed);0.0;1.0;0.0;0.0
6;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= 1;daikon.inv.unary.scalar.LowerBound;(return.review_count);0.0;1.0;0.0;0.0
7;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.transactions != null;daikon.inv.unary.scalar.NonZero;(return.transactions);1.0;0.0;0.0;0.0
8;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;"return.transactions[] elements one of { ""delivery"", ""pickup"", ""restaurant_reservation"" }";daikon.inv.unary.stringsequence.EltOneOfString;(return.transactions[..]);1.0;0.0;0.0;0.0
9;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location != null;daikon.inv.unary.scalar.NonZero;(return.location);1.0;0.0;0.0;0.0
10;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.display_address != null;daikon.inv.unary.scalar.NonZero;(return.location.display_address);1.0;0.0;0.0;0.0
11;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.categories[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.categories[..]));0.0;1.0;0.0;0.0
12;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.location.display_address[]) >= 2;daikon.inv.unary.scalar.LowerBound;(size(return.location.display_address[..]));0.0;1.0;0.0;0.0
13;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > return.review_count;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.review_count);0.0;1.0;0.0;0.0
14;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.categories[..]));0.0;1.0;0.0;0.0
15;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.transactions[..]));0.0;1.0;0.0;0.0
16;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius > size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
17;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.categories[..]));0.0;1.0;0.0;0.0
18;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.transactions[..]));0.0;1.0;0.0;0.0
19;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.offset >= size(return.transactions[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(return.transactions[..])-1);0.0;1.0;0.0;0.0
20;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude != return.coordinates.longitude;daikon.inv.binary.twoScalar.FloatNonEqual;(return.coordinates.latitude, return.coordinates.longitude);0.0;1.0;0.0;0.0
21;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.latitude, return.distance);0.0;1.0;0.0;0.0
22;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude != return.rating;daikon.inv.binary.twoScalar.FloatNonEqual;(return.coordinates.latitude, return.rating);0.0;1.0;0.0;0.0
23;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.longitude < return.distance;daikon.inv.binary.twoScalar.FloatLessThan;(return.coordinates.longitude, return.distance);0.0;1.0;0.0;0.0
24;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.longitude != return.rating;daikon.inv.binary.twoScalar.FloatNonEqual;(return.coordinates.longitude, return.rating);0.0;1.0;0.0;0.0
25;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.distance > return.rating;daikon.inv.binary.twoScalar.FloatGreaterThan;(return.distance, return.rating);0.0;1.0;0.0;0.0
26;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(input.price[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.price[..])-1);0.0;1.0;0.0;0.0
27;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(input.attributes[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.attributes[..]));0.0;1.0;0.0;0.0
28;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.review_count, size(return.transactions[..]));0.0;1.0;0.0;0.0
29;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address1 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address1, return.location.display_address[..]);1.0;0.0;0.0;0.0
30;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address2 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address2, return.location.display_address[..]);1.0;0.0;0.0;0.0
31;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.location.address3 in return.location.display_address[];daikon.inv.binary.sequenceString.MemberString;(return.location.address3, return.location.display_address[..]);1.0;0.0;0.0;0.0
32;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.transactions[]) % size(input.categories[]) == 0;daikon.inv.binary.twoScalar.NumericInt$Divides;(size(input.categories[..]), size(return.transactions[..]));0.0;1.0;0.0;0.0
33;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) % size(return.transactions[])-1 == 0;daikon.inv.binary.twoScalar.NumericInt$Divides;(size(input.categories[..]), size(return.transactions[..])-1);0.0;1.0;0.0;0.0
34;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[])-1 >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(size(input.categories[..])-1, size(return.transactions[..]));0.0;1.0;0.0;0.0
35;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[])-1 % size(return.transactions[])-1 == 0;daikon.inv.binary.twoScalar.NumericInt$Divides;(size(input.categories[..])-1, size(return.transactions[..])-1);0.0;1.0;0.0;0.0
36;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[])-1 <= size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.categories[..])-1, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
37;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.price[])-1 <= size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.price[..])-1, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
38;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.attributes[])-1 <= size(return.categories[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.attributes[..])-1, size(return.categories[..]));0.0;1.0;0.0;0.0
39;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.attributes[])-1 <= size(return.transactions[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.attributes[..])-1, size(return.transactions[..]));0.0;1.0;0.0;0.0
40;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.attributes[])-1 <= size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.attributes[..])-1, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
41;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.categories[])-1 <= size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(return.categories[..])-1, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
42;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.transactions[])-1 <= size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(return.transactions[..])-1, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
43;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);1.0;0.0;0.0;0.0
44;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.region != null;daikon.inv.unary.scalar.NonZero;(return.region);1.0;0.0;0.0;0.0
45;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.region.center != null;daikon.inv.unary.scalar.NonZero;(return.region.center);1.0;0.0;0.0;0.0
46;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.businesses != null;daikon.inv.unary.scalar.NonZero;(return.businesses);1.0;0.0;0.0;0.0
47;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.businesses[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.businesses[..]);1.0;0.0;0.0;0.0
48;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > return.total;daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, return.total);0.0;1.0;0.0;0.0
49;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius > size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.radius, size(return.businesses[..]));0.0;1.0;0.0;0.0
50;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.limit >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.businesses[..]));1.0;0.0;0.0;0.0
51;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, return.total);0.0;1.0;0.0;0.0
52;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total != size(input.categories[]);daikon.inv.binary.twoScalar.IntNonEqual;(return.total, size(input.categories[..]));0.0;1.0;0.0;0.0
53;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= size(input.categories[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(input.categories[..])-1);0.0;1.0;0.0;0.0
54;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total != size(input.price[]);daikon.inv.binary.twoScalar.IntNonEqual;(return.total, size(input.price[..]));0.0;1.0;0.0;0.0
55;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= size(input.price[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(input.price[..])-1);0.0;1.0;0.0;0.0
56;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.total >= size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.businesses[..]));1.0;0.0;0.0;0.0
57;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.region.center.latitude != return.region.center.longitude;daikon.inv.binary.twoScalar.FloatNonEqual;(return.region.center.latitude, return.region.center.longitude);0.0;1.0;0.0;0.0
58;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.categories[]) != size(return.businesses[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(input.categories[..]), size(return.businesses[..])-1);0.0;1.0;0.0;0.0
59;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;size(input.categories[])-1 <= size(return.businesses[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.categories[..])-1, size(return.businesses[..]));0.0;1.0;0.0;0.0
60;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1.0;0.0;0.0;0.0
61;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.image_url)==68;daikon.inv.unary.string.FixedLengthString;(return.image_url);1.0;0.0;0.0;0.0
62;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.image_url is Url;daikon.inv.unary.string.IsUrl;(return.image_url);1.0;0.0;0.0;0.0
63;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.phone is Numeric;daikon.inv.unary.string.IsNumeric;(return.phone);0.0;1.0;0.0;0.0
64;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url);1.0;0.0;0.0;0.0
65;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;LENGTH(return.location.country)==2;daikon.inv.unary.string.FixedLengthString;(return.location.country);1.0;0.0;0.0;0.0
66;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.categories[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.categories[..])-1);0.0;1.0;0.0;0.0
67;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.open_at > return.review_count;daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, return.review_count);0.0;1.0;0.0;0.0
68;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.open_at > size(return.categories[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, size(return.categories[..]));0.0;1.0;0.0;0.0
69;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.open_at > size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, size(return.transactions[..]));0.0;1.0;0.0;0.0
70;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.open_at > size(return.location.display_address[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, size(return.location.display_address[..]));0.0;1.0;0.0;0.0
71;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.latitude != return.distance;daikon.inv.binary.twoScalar.FloatNonEqual;(return.coordinates.latitude, return.distance);0.0;1.0;0.0;0.0
72;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.coordinates.longitude != return.distance;daikon.inv.binary.twoScalar.FloatNonEqual;(return.coordinates.longitude, return.distance);0.0;1.0;0.0;0.0
73;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(return.transactions[..]));0.0;1.0;0.0;0.0
74;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= size(return.transactions[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(size(input.categories[..]), size(return.transactions[..]));0.0;1.0;0.0;0.0
75;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[])-1 >= size(return.transactions[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(size(input.categories[..])-1, size(return.transactions[..])-1);0.0;1.0;0.0;0.0
76;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.open_at > return.total;daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, return.total);0.0;1.0;0.0;0.0
77;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.open_at > size(return.businesses[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.open_at, size(return.businesses[..]));0.0;1.0;0.0;0.0
78;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(return.location.display_address[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.location.display_address[..]));1.0;0.0;0.0;0.0
79;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.radius != return.review_count;daikon.inv.binary.twoScalar.IntNonEqual;(input.radius, return.review_count);0.0;1.0;0.0;0.0
80;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.distance != return.rating;daikon.inv.binary.twoScalar.FloatNonEqual;(return.distance, return.rating);0.0;1.0;0.0;0.0
81;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(input.attributes[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(input.attributes[..])-1);0.0;1.0;0.0;0.0
82;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;size(input.categories[]) >= size(return.transactions[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(size(input.categories[..]), size(return.transactions[..])-1);0.0;1.0;0.0;0.0
83;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.region.center.latitude != 0;daikon.inv.unary.scalar.NonZeroFloat;(return.region.center.latitude);0.0;1.0;0.0;0.0
84;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;return.region.center.longitude != 0;daikon.inv.unary.scalar.NonZeroFloat;(return.region.center.longitude);0.0;1.0;0.0;0.0
85;main.businessessearch.getBusinesses&200(main.getBusinesses&Input):::EXIT;input.radius != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.radius, return.total);0.0;1.0;0.0;0.0
86;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;input.limit >= size(return.transactions[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.transactions[..])-1);0.0;1.0;0.0;0.0
87;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.review_count >= size(return.transactions[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.review_count, size(return.transactions[..])-1);0.0;1.0;0.0;0.0
88;main.businessessearch.getBusinesses&200&businesses(main.getBusinesses&Input):::EXIT;return.rating >= 1.0;daikon.inv.unary.scalar.LowerBoundFloat;(return.rating);1.0;0.0;0.0;0.0

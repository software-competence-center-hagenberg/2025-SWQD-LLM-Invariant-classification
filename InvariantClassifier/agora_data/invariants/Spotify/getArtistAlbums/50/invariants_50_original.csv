pptname;invariant;invariantType;variables;tp;fp;enter;bug
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::ENTER;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::ENTER;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height == return.width;daikon.inv.binary.twoScalar.IntEqual;(return.height, return.width);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height one of { 64, 300, 640 };daikon.inv.unary.scalar.OneOfScalar;(return.height);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.height);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.height);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height > size(input.include_groups[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.height, size(input.include_groups[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::ENTER;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.album_type one of { ""album"", ""compilation"", ""single"" }";daikon.inv.unary.string.OneOfString;(return.album_type);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.images != null;daikon.inv.unary.scalar.NonZero;(return.images);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.images[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.images[..]);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.type == ""album""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.artists != null;daikon.inv.unary.scalar.NonZero;(return.artists);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.artists[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.artists[..]);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.release_date_precision one of { ""day"", ""year"" }";daikon.inv.unary.string.OneOfString;(return.release_date_precision);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks >= 1;daikon.inv.unary.scalar.LowerBound;(return.total_tracks);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.images[]) == 3;daikon.inv.unary.scalar.OneOfScalar;(size(return.images[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(return.available_markets[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit >= size(return.images[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.images[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(return.artists[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset != size(input.include_groups[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset >= size(return.artists[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(return.artists[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.album_group in input.include_groups[];daikon.inv.binary.sequenceString.MemberString;(input.include_groups[..], return.album_group);1;0;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.market in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(input.market, return.available_markets[..]);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(return.total_tracks, size(return.available_markets[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(return.total_tracks, size(return.available_markets[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) <= size(return.available_markets[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..]), size(return.available_markets[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(input.include_groups[..]), size(return.available_markets[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[])-1 <= size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..])-1, size(return.available_markets[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[])-1 <= size(return.images[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..])-1, size(return.images[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[]) != size(return.images[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..]), size(return.images[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[]) != size(return.artists[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..]), size(return.artists[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[])-1 != size(return.images[]);daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..])-1, size(return.images[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[])-1 != size(return.artists[]);daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..])-1, size(return.artists[..]));0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::ENTER;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset >= 1;daikon.inv.unary.scalar.LowerBound;(input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.items != null;daikon.inv.unary.scalar.NonZero;(return.items);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.items[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.items[..]);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(input.include_groups[..]));0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit > input.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, input.offset);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit > return.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, return.offset);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.total);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(input.include_groups[..])-1);0;0;1;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset <= return.limit;daikon.inv.binary.twoScalar.IntLessEqual;(input.offset, return.limit);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, return.total);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.items[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.items[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= return.offset;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, return.offset);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(return.limit, return.total);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(return.limit, size(input.include_groups[..])-1);0;1;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));1;0;0;0
main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));1;0;0;0

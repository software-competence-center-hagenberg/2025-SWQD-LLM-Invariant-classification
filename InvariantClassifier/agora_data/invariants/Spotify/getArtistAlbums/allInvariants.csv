ID;pptname;invariant;invariantType;variables;tp;fp;enter;bug
0;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1.0;0.0;0.0;0.0
1;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);1.0;0.0;0.0;0.0
2;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height == return.width;daikon.inv.binary.twoScalar.IntEqual;(return.height, return.width);1.0;0.0;0.0;0.0
3;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height one of { 64, 300, 640 };daikon.inv.unary.scalar.OneOfScalar;(return.height);1.0;0.0;0.0;0.0
4;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.limit < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.height);0.0;1.0;0.0;0.0
5;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;input.offset < return.height;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.height);0.0;1.0;0.0;0.0
6;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.height > size(input.include_groups[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.height, size(input.include_groups[..]));0.0;1.0;0.0;0.0
7;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.album_type one of { ""album"", ""compilation"", ""single"" }";daikon.inv.unary.string.OneOfString;(return.album_type);1.0;0.0;0.0;0.0
8;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1.0;0.0;0.0;0.0
9;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.images != null;daikon.inv.unary.scalar.NonZero;(return.images);1.0;0.0;0.0;0.0
10;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.images[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.images[..]);1.0;0.0;0.0;0.0
11;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.type == ""album""";daikon.inv.unary.string.OneOfString;(return.type);1.0;0.0;0.0;0.0
12;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.artists != null;daikon.inv.unary.scalar.NonZero;(return.artists);1.0;0.0;0.0;0.0
13;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.artists[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.artists[..]);1.0;0.0;0.0;0.0
14;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.release_date_precision one of { ""day"", ""year"" }";daikon.inv.unary.string.OneOfString;(return.release_date_precision);0.0;1.0;0.0;0.0
15;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks >= 1;daikon.inv.unary.scalar.LowerBound;(return.total_tracks);1.0;0.0;0.0;0.0
16;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.images[]) == 3;daikon.inv.unary.scalar.OneOfScalar;(size(return.images[..]));0.0;1.0;0.0;0.0
17;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));1.0;0.0;0.0;0.0
18;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
19;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit >= size(return.images[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.images[..])-1);0.0;1.0;0.0;0.0
20;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.limit > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(return.artists[..]));0.0;1.0;0.0;0.0
21;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..]));0.0;1.0;0.0;0.0
22;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
23;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.offset >= size(return.artists[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(return.artists[..])-1);0.0;1.0;0.0;0.0
24;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.album_group in input.include_groups[];daikon.inv.binary.sequenceString.MemberString;(input.include_groups[..], return.album_group);1.0;0.0;0.0;0.0
25;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;input.market in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(input.market, return.available_markets[..]);0.0;1.0;0.0;0.0
26;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(return.total_tracks, size(return.available_markets[..]));0.0;1.0;0.0;0.0
27;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.total_tracks != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(return.total_tracks, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
28;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) <= size(return.available_markets[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..]), size(return.available_markets[..]));0.0;1.0;0.0;0.0
29;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[]) != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(input.include_groups[..]), size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
30;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[])-1 <= size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..])-1, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
31;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(input.include_groups[])-1 <= size(return.images[]);daikon.inv.binary.twoScalar.IntLessEqual;(size(input.include_groups[..])-1, size(return.images[..]));0.0;1.0;0.0;0.0
32;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[]) != size(return.images[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..]), size(return.images[..])-1);0.0;1.0;0.0;0.0
33;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[]) != size(return.artists[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..]), size(return.artists[..])-1);0.0;1.0;0.0;0.0
34;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[])-1 != size(return.images[]);daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..])-1, size(return.images[..]));0.0;1.0;0.0;0.0
35;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[])-1 != size(return.artists[]);daikon.inv.binary.twoScalar.IntNonEqual;(size(return.available_markets[..])-1, size(return.artists[..]));0.0;1.0;0.0;0.0
36;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);1.0;0.0;0.0;0.0
37;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);1.0;0.0;0.0;0.0
38;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.items != null;daikon.inv.unary.scalar.NonZero;(return.items);1.0;0.0;0.0;0.0
39;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.items[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.items[..]);1.0;0.0;0.0;0.0
40;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);1.0;0.0;0.0;0.0
41;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= 0;daikon.inv.unary.scalar.LowerBound;(return.total);1.0;0.0;0.0;0.0
42;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit > return.offset;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, return.offset);0.0;1.0;0.0;0.0
43;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.total);0.0;1.0;0.0;0.0
44;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));1.0;0.0;0.0;0.0
45;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset <= return.limit;daikon.inv.binary.twoScalar.IntLessEqual;(input.offset, return.limit);0.0;1.0;0.0;0.0
46;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, return.total);0.0;1.0;0.0;0.0
47;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.offset != size(return.items[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.items[..])-1);0.0;1.0;0.0;0.0
48;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= return.offset;daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, return.offset);0.0;1.0;0.0;0.0
49;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(return.limit, return.total);0.0;1.0;0.0;0.0
50;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit != size(input.include_groups[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(return.limit, size(input.include_groups[..])-1);0.0;1.0;0.0;0.0
51;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));1.0;0.0;0.0;0.0
52;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));1.0;0.0;0.0;0.0
53;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href);1.0;0.0;0.0;0.0
54;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
55;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1.0;0.0;0.0;0.0
56;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type);1.0;0.0;0.0;0.0
57;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri);1.0;0.0;0.0;0.0
58;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1.0;0.0;0.0;0.0
59;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1.0;0.0;0.0;0.0
60;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1.0;0.0;0.0;0.0
61;main.artists{id}albums.getArtistAlbums&200&items&artists(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1.0;0.0;0.0;0.0
62;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;LENGTH(return.url)==64;daikon.inv.unary.string.FixedLengthString;(return.url);1.0;0.0;0.0;0.0
63;main.artists{id}albums.getArtistAlbums&200&items&images(main.getArtistAlbums&Input):::EXIT;return.url is Url;daikon.inv.unary.string.IsUrl;(return.url);1.0;0.0;0.0;0.0
64;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..]);1.0;0.0;0.0;0.0
65;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href);1.0;0.0;0.0;0.0
66;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
67;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1.0;0.0;0.0;0.0
68;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type);1.0;0.0;0.0;0.0
69;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri);1.0;0.0;0.0;0.0
70;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1.0;0.0;0.0;0.0
71;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1.0;0.0;0.0;0.0
72;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1.0;0.0;0.0;0.0
73;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1.0;0.0;0.0;0.0
74;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
75;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next);1.0;0.0;0.0;0.0
76;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous);1.0;0.0;0.0;0.0
77;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href);1.0;0.0;0.0;0.0
78;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next);1.0;0.0;0.0;0.0
79;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous);1.0;0.0;0.0;0.0
80;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href);1.0;0.0;0.0;0.0
81;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next);1.0;0.0;0.0;0.0
82;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous);1.0;0.0;0.0;0.0
83;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;"return.release_date_precision one of { ""day"", ""month"", ""year"" }";daikon.inv.unary.string.OneOfString;(return.release_date_precision);1.0;0.0;0.0;0.0
84;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.images[]) one of { 1, 3 };daikon.inv.unary.scalar.OneOfScalar;(size(return.images[..]));0.0;1.0;0.0;0.0
85;main.artists{id}albums.getArtistAlbums&200&items(main.getArtistAlbums&Input):::EXIT;size(return.available_markets[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.available_markets[..]));1.0;0.0;0.0;0.0
86;main.artists{id}albums.getArtistAlbums&200(main.getArtistAlbums&Input):::EXIT;return.limit >= 1;daikon.inv.unary.scalar.LowerBound;(return.limit);1.0;0.0;0.0;0.0

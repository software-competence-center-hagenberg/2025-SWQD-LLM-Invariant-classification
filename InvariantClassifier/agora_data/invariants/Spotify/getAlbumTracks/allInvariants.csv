ID;pptname;invariant;invariantType;variables;tp;fp;enter;bug
0;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1.0;0.0;0.0;0.0
1;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);1.0;0.0;0.0;0.0
2;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type == return.type;daikon.inv.binary.twoString.StringEqual;(return.linked_from.type, return.type);1.0;0.0;0.0;0.0
3;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists != null;daikon.inv.unary.scalar.NonZero;(return.artists);1.0;0.0;0.0;0.0
4;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.artists[..]);1.0;0.0;0.0;0.0
5;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.disc_number);1.0;0.0;0.0;0.0
6;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1.0;0.0;0.0;0.0
7;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.is_local == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_local);1.0;0.0;0.0;0.0
8;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.linked_from.type == ""track""";daikon.inv.unary.string.OneOfString;(return.linked_from.type);1.0;0.0;0.0;0.0
9;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.restrictions.reason == ""explicit""";daikon.inv.unary.string.OneOfString;(return.restrictions.reason);0.0;1.0;0.0;0.0
10;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.track_number);1.0;0.0;0.0;0.0
11;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.type == ""track""";daikon.inv.unary.string.OneOfString;(return.type);1.0;0.0;0.0;0.0
12;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));1.0;0.0;0.0;0.0
13;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > return.disc_number;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, return.disc_number);0.0;1.0;0.0;0.0
14;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.duration_ms);0.0;1.0;0.0;0.0
15;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(return.artists[..]));0.0;1.0;0.0;0.0
16;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
17;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.duration_ms);0.0;1.0;0.0;0.0
18;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset >= size(return.artists[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(return.artists[..])-1);0.0;1.0;0.0;0.0
19;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
20;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.market in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(input.market, return.available_markets[..]);0.0;1.0;0.0;0.0
21;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.href in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.href);0.0;1.0;0.0;0.0
22;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.id);0.0;1.0;0.0;0.0
23;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.type);0.0;1.0;0.0;0.0
24;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.uri in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.uri);0.0;1.0;0.0;0.0
25;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(return.disc_number, return.duration_ms);0.0;1.0;0.0;0.0
26;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(return.disc_number, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
27;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > return.track_number;daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, return.track_number);0.0;1.0;0.0;0.0
28;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.artists[..]));0.0;1.0;0.0;0.0
29;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.available_markets[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.available_markets[..]));0.0;1.0;0.0;0.0
30;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(return.track_number, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
31;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(size(return.artists[..]), size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
32;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);1.0;0.0;0.0;0.0
33;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);1.0;0.0;0.0;0.0
34;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items != null;daikon.inv.unary.scalar.NonZero;(return.items);1.0;0.0;0.0;0.0
35;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.items[..]);1.0;0.0;0.0;0.0
36;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);1.0;0.0;0.0;0.0
37;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= 1;daikon.inv.unary.scalar.LowerBound;(return.total);1.0;0.0;0.0;0.0
38;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit != return.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.offset);0.0;1.0;0.0;0.0
39;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.total);0.0;1.0;0.0;0.0
40;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));1.0;0.0;0.0;0.0
41;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, return.total);0.0;1.0;0.0;0.0
42;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.items[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.items[..])-1);0.0;1.0;0.0;0.0
43;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));1.0;0.0;0.0;0.0
44;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(return.offset, return.total);0.0;1.0;0.0;0.0
45;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));1.0;0.0;0.0;0.0
46;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href);1.0;0.0;0.0;0.0
47;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
48;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1.0;0.0;0.0;0.0
49;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type);1.0;0.0;0.0;0.0
50;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri);1.0;0.0;0.0;0.0
51;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1.0;0.0;0.0;0.0
52;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1.0;0.0;0.0;0.0
53;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1.0;0.0;0.0;0.0
54;main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1.0;0.0;0.0;0.0
55;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..]);1.0;0.0;0.0;0.0
56;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href);1.0;0.0;0.0;0.0
57;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
58;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1.0;0.0;0.0;0.0
59;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.href)==56;daikon.inv.unary.string.FixedLengthString;(return.linked_from.href);1.0;0.0;0.0;0.0
60;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.href is Url;daikon.inv.unary.string.IsUrl;(return.linked_from.href);1.0;0.0;0.0;0.0
61;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.id)==22;daikon.inv.unary.string.FixedLengthString;(return.linked_from.id);1.0;0.0;0.0;0.0
62;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.type)==5;daikon.inv.unary.string.FixedLengthString;(return.linked_from.type);1.0;0.0;0.0;0.0
63;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.linked_from.uri);1.0;0.0;0.0;0.0
64;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.preview_url)==107;daikon.inv.unary.string.FixedLengthString;(return.preview_url);1.0;0.0;0.0;0.0
65;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.preview_url is Url;daikon.inv.unary.string.IsUrl;(return.preview_url);1.0;0.0;0.0;0.0
66;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.restrictions.reason)==8;daikon.inv.unary.string.FixedLengthString;(return.restrictions.reason);0.0;1.0;0.0;0.0
67;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type);1.0;0.0;0.0;0.0
68;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri);1.0;0.0;0.0;0.0
69;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1.0;0.0;0.0;0.0
70;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.linked_from.type);1.0;0.0;0.0;0.0
71;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1.0;0.0;0.0;0.0
72;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1.0;0.0;0.0;0.0
73;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.id);1.0;0.0;0.0;0.0
74;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.type);1.0;0.0;0.0;0.0
75;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.type);1.0;0.0;0.0;0.0
76;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.id, return.linked_from.uri);1.0;0.0;0.0;0.0
77;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.linked_from.uri);1.0;0.0;0.0;0.0
78;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.uri);1.0;0.0;0.0;0.0
79;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.uri, return.type);1.0;0.0;0.0;0.0
80;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1.0;0.0;0.0;0.0
81;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1.0;0.0;0.0;0.0
82;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next);1.0;0.0;0.0;0.0
83;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous);1.0;0.0;0.0;0.0
84;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href);1.0;0.0;0.0;0.0
85;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next);1.0;0.0;0.0;0.0
86;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous);1.0;0.0;0.0;0.0
87;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href);1.0;0.0;0.0;0.0
88;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next);1.0;0.0;0.0;0.0
89;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous);1.0;0.0;0.0;0.0
90;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != size(return.artists[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(return.artists[..]));0.0;1.0;0.0;0.0
91;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit >= size(return.artists[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.artists[..])-1);0.0;1.0;0.0;0.0
92;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.restrictions.reason one of { ""explicit"", ""market"" }";daikon.inv.unary.string.OneOfString;(return.restrictions.reason);0.0;1.0;0.0;0.0
93;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.available_markets[])-1 != 0;daikon.inv.unary.scalar.NonZero;(size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
94;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit >= return.disc_number;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, return.disc_number);0.0;1.0;0.0;0.0
95;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(return.available_markets[..]));0.0;1.0;0.0;0.0
96;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
97;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..]));0.0;1.0;0.0;0.0
98;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
99;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(return.disc_number, size(return.available_markets[..]));0.0;1.0;0.0;0.0
100;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) != size(return.available_markets[]);daikon.inv.binary.twoScalar.IntNonEqual;(size(return.artists[..]), size(return.available_markets[..]));0.0;1.0;0.0;0.0
101;main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[])-1 != size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(size(return.artists[..])-1, size(return.available_markets[..])-1);0.0;1.0;0.0;0.0
102;main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.limit >= 1;daikon.inv.unary.scalar.LowerBound;(return.limit);1.0;0.0;0.0;0.0

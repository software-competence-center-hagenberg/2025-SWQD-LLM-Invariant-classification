pptname;invariant;invariantType;variables;tp;fp;enter;bug
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.href)==57;daikon.inv.unary.string.FixedLengthString;(return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.type)==6;daikon.inv.unary.string.FixedLengthString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;LENGTH(return.uri)==37;daikon.inv.unary.string.FixedLengthString;(return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type == return.type;daikon.inv.binary.twoString.StringEqual;(return.linked_from.type, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;All the elements of return.available_markets[] have LENGTH=2;daikon.inv.unary.stringsequence.SequenceFixedLengthString;(return.available_markets[..]);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.disc_number);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.href)==56;daikon.inv.unary.string.FixedLengthString;(return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.id)==22;daikon.inv.unary.string.FixedLengthString;(return.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.is_local == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_local);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.href)==56;daikon.inv.unary.string.FixedLengthString;(return.linked_from.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.href is Url;daikon.inv.unary.string.IsUrl;(return.linked_from.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.id)==22;daikon.inv.unary.string.FixedLengthString;(return.linked_from.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.linked_from.type == ""track""";daikon.inv.unary.string.OneOfString;(return.linked_from.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.type)==5;daikon.inv.unary.string.FixedLengthString;(return.linked_from.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.linked_from.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.linked_from.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.preview_url)==107;daikon.inv.unary.string.FixedLengthString;(return.preview_url);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.preview_url is Url;daikon.inv.unary.string.IsUrl;(return.preview_url);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.restrictions.reason == ""explicit""";daikon.inv.unary.string.OneOfString;(return.restrictions.reason);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.restrictions.reason)==8;daikon.inv.unary.string.FixedLengthString;(return.restrictions.reason);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.track_number);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.type == ""track""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.type)==5;daikon.inv.unary.string.FixedLengthString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;LENGTH(return.uri)==36;daikon.inv.unary.string.FixedLengthString;(return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > return.disc_number;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, return.disc_number);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(return.artists[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(return.disc_number, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > return.track_number;daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, return.track_number);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.artists[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.available_markets[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.available_markets[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.linked_from.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(return.href, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.id is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.id, return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.id);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.linked_from.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.linked_from.href;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.href, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.id, return.linked_from.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.linked_from.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.type, return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.linked_from.uri;daikon.inv.binary.twoString.StdString$SubString;(return.linked_from.uri, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.type is a substring of return.uri;daikon.inv.binary.twoString.StdString$SubString;(return.type, return.uri);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;LENGTH(input.id)==22;daikon.inv.unary.string.FixedLengthString;(input.id);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;LENGTH(input.market)==2;daikon.inv.unary.string.FixedLengthString;(input.market);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.href is Url;daikon.inv.unary.string.IsUrl;(return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.next is Url;daikon.inv.unary.string.IsUrl;(return.next);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.previous is Url;daikon.inv.unary.string.IsUrl;(return.previous);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= 1;daikon.inv.unary.scalar.LowerBound;(return.total);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.next);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.id is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.id, return.previous);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.href;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.href);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.next;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.next);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.market is a substring of return.previous;daikon.inv.binary.twoString.StdString$SubString;(input.market, return.previous);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));1;0;0;0

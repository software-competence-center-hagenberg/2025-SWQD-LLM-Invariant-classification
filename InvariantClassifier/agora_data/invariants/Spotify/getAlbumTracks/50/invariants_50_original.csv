pptname;invariant;invariantType;variables;tp;fp;enter;bug
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::ENTER;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;"return.type == ""artist""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items&artists(main.getAlbumTracks&Input):::EXIT;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::ENTER;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type == return.type;daikon.inv.binary.twoString.StringEqual;(return.linked_from.type, return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists != null;daikon.inv.unary.scalar.NonZero;(return.artists);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.artists[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.artists[..]);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.disc_number);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.external_urls != null;daikon.inv.unary.scalar.NonZero;(return.external_urls);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.is_local == false;daikon.inv.unary.scalar.OneOfScalar;(return.is_local);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.linked_from.type == ""track""";daikon.inv.unary.string.OneOfString;(return.linked_from.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.restrictions.reason == ""explicit""";daikon.inv.unary.string.OneOfString;(return.restrictions.reason);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number >= 1;daikon.inv.unary.scalar.LowerBound;(return.track_number);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;"return.type == ""track""";daikon.inv.unary.string.OneOfString;(return.type);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) >= 1;daikon.inv.unary.scalar.LowerBound;(size(return.artists[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > return.disc_number;daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, return.disc_number);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(input.limit, size(return.artists[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.limit < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(input.limit, size(return.available_markets[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset >= size(return.artists[])-1;daikon.inv.binary.twoScalar.IntGreaterEqual;(input.offset, size(return.artists[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.offset < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(input.offset, size(return.available_markets[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;input.market in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(input.market, return.available_markets[..]);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.href in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.href);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.id in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.id);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.type in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.type);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.linked_from.uri in return.available_markets[];daikon.inv.binary.sequenceString.MemberString;(return.available_markets[..], return.linked_from.uri);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < return.duration_ms;daikon.inv.binary.twoScalar.IntLessThan;(return.disc_number, return.duration_ms);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.disc_number < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(return.disc_number, size(return.available_markets[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > return.track_number;daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, return.track_number);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.artists[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.artists[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.duration_ms > size(return.available_markets[]);daikon.inv.binary.twoScalar.IntGreaterThan;(return.duration_ms, size(return.available_markets[..]));0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;return.track_number < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(return.track_number, size(return.available_markets[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200&items(main.getAlbumTracks&Input):::EXIT;size(return.artists[]) < size(return.available_markets[])-1;daikon.inv.binary.twoScalar.IntLessThan;(size(return.artists[..]), size(return.available_markets[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::ENTER;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit == return.limit;daikon.inv.binary.twoScalar.IntEqual;(input.limit, return.limit);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset == return.offset;daikon.inv.binary.twoScalar.IntEqual;(input.offset, return.offset);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input != null;daikon.inv.unary.scalar.NonZero;(input);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return != null;daikon.inv.unary.scalar.NonZero;(return);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items != null;daikon.inv.unary.scalar.NonZero;(return.items);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.items[] elements != null;daikon.inv.unary.sequence.EltNonZero;(return.items[..]);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset >= 0;daikon.inv.unary.scalar.LowerBound;(return.offset);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= 1;daikon.inv.unary.scalar.LowerBound;(return.total);1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit != input.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, input.offset);0;0;1;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit != return.offset;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.offset);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.limit, return.total);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(input.limit, size(return.items[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, return.total);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;input.offset != size(return.items[])-1;daikon.inv.binary.twoScalar.IntNonEqual;(input.offset, size(return.items[..])-1);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.limit >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.limit, size(return.items[..]));1;0;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.offset != return.total;daikon.inv.binary.twoScalar.IntNonEqual;(return.offset, return.total);0;1;0;0
main.albums{id}tracks.getAlbumTracks&200(main.getAlbumTracks&Input):::EXIT;return.total >= size(return.items[]);daikon.inv.binary.twoScalar.IntGreaterEqual;(return.total, size(return.items[..]));1;0;0;0
